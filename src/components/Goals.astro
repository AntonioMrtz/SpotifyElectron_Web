---
import scalabilityIco from "../../public/icons/goals-icons/icons8-en-alza-48.png?url";
import gitForkIco from "../../public/icons/goals-icons/icons8-bifurcación-código-48.png?url";
import cloneIco from "../../public/icons/goals-icons/icons8-clon-48.png?url";
import goodPracticesIco from "../../public/icons/goals-icons/icons8-buena-calidad-48.png?url";
import writeIco from "../../public/icons/goals-icons/icons8-escribir-48.png?url";
import testingIco from "../../public/icons/goals-icons/icons8-prueba-48.png?url";
import securityIco from "../../public/icons/goals-icons/icons8-seguridad-48.png?url";
import serverIco from "../../public/icons/goals-icons/icons8-servidor-48.png?url";
import groupTaskIco from "../../public/icons/goals-icons/icons8-tarea-grupal-48.png?url";
import newIco from "../../public/icons/goals-icons/icons8-nuevo-48.png?url";
import GoalCard from "./GoalCard.astro";

const goalsCardData = [
    {
        icon: scalabilityIco,
        text: "Developed for scalability and quick iterations",
    },
    {
        icon: gitForkIco,
        text: "Control version and contributions using Git",
    },
    {
        icon: cloneIco,
        text: "Full functionality clone of Spotify",
    },
    {
        icon: goodPracticesIco,
        text: "Develop with the best programming practices",
    },
    {
        icon: writeIco,
        text: "Cross platform with one codebase",
    },
    {
        icon: testingIco,
        text: "Full coverage test suite",
    },
    {
        icon: securityIco,
        text: "Focused on security",
    },
    {
        icon: serverIco,
        text: "Song streaming with AWS services",
    },
    {
        icon: groupTaskIco,
        text: "Agile development and team organization",
    },
    {
        icon: newIco,
        text: "Added new functionality",
    },
];
---


<div class="d-flex flex-row wrapperGoalCard">
    <div class="d-flex flex-column goals-column">
        {
            goalsCardData.slice(0,5).map((goalCardData) => {
                return (
                    <GoalCard icon={goalCardData.icon} text={goalCardData.text} />
                );
            })
        }
    </div>
    
    <div class="d-flex flex-column goals-column">
        {
            goalsCardData.slice(5,goalsCardData.length).map((goalCardData) => {
                return (
                    <GoalCard icon={goalCardData.icon} text={goalCardData.text} />
                );
            })
        }
    </div>
</div>

<style>

    .wrapperGoalCard{

        padding-bottom: 8rem !important;
        gap: 60px;
    }
    .goals-column {
        gap: 14px;
    }

    @media (max-width: 1332px) {
        
        .wrapperGoalCard{
            flex-direction: column !important;
            gap: 28px;
        }
        .goals-column{
            gap: 28px;
        }
    }

</style>
